name: Python Bindings
on: [workflow_dispatch]
#on: 
#  push:
#    paths:
#    - python/**
#  pull_request:
#    paths:
#    - python/**

env:
  VCPKGRS_DYNAMIC: 1



jobs:
  PreTestChecks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set CARGO_VERSION environment variable
      run: |
        cargo_version_full=`cargo --version`
        cargo_version_removed_prefix=${cargo_version_full#*cargo }
        cargo_version=${cargo_version_removed_prefix% (*}
        echo "CARGO_VERSION=$cargo_version" >> $GITHUB_ENV
    - uses: actions/cache@v2
      id: cache-cargo
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-
    - name: Lint bindings
      run: cd python && cargo clippy -- -D warnings
    - name: Check code formatted
      run: cd python && cargo fmt -- --check
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Check typestub
      run: |
        cd python
        cargo build 
        cd ..
        cp target/debug/libballista.so python/ci/ballista.so
        cd python/ci
        python check_stub_exhaustiveness.py
        rm ballista.so
    - name: Workspace rebuild for cache
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      #Do a full workspace rebuild so that the cache contains artifacts for all workspace members 
      run: |
        cargo clean
        cargo build



  
  Ubuntu:
    runs-on: ubuntu-latest
    needs: [PreTestChecks]
    steps:
    - uses: actions/checkout@v2
    - name: Set CARGO_VERSION environment variable
      run: |
        cargo_version_full=`cargo --version`
        cargo_version_removed_prefix=${cargo_version_full#*cargo }
        cargo_version=${cargo_version_removed_prefix% (*}
        echo "CARGO_VERSION=$cargo_version" >> $GITHUB_ENV
    - uses: actions/cache@v2
      id: cache-cargo
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-
  
    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install Python dependencies
      run: python -m pip install --upgrade pip setuptools wheel
    - name: Run tests
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install maturin==0.9.0 toml==0.10.1 pyarrow==1.0.0
        cd python
        maturin develop
        python -m unittest discover tests
    - name: Workspace rebuild for cache
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      #Do a full workspace rebuild so that the cache contains artifacts for all workspace members 
      run: |
        cargo clean
        cargo build



  Mac:
    runs-on: macos-latest
    needs: [PreTestChecks]
    steps:
    - uses: actions/checkout@v2
    - name: Set CARGO_VERSION environment variable
      run: |
        cargo_version_full=`cargo --version`
        cargo_version_removed_prefix=${cargo_version_full#*cargo }
        cargo_version=${cargo_version_removed_prefix% (*}
        echo "CARGO_VERSION=$cargo_version" >> $GITHUB_ENV
    - uses: actions/cache@v2
      id: cache-cargo
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-
    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install Python dependencies
      run: python -m pip install --upgrade pip setuptools wheel
    - name: Run tests
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install maturin==0.9.0 toml==0.10.1 pyarrow==1.0.0
        cd python
        maturin develop
        python -m unittest discover tests
    - name: Workspace rebuild for cache
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      #Do a full workspace rebuild so that the cache contains artifacts for all workspace members 
      run: |
        cargo clean
        cargo build



  Windows:
    runs-on: windows-2016
    needs: [PreTestChecks]
    steps:
    - uses: actions/checkout@v2
    - name: Setup environment variables
      run: |
        #Setting up cargo version variable 
        $full_version = cargo --version
        $version = $full_version -replace ".*cargo " -replace " \(.*"
        echo "CARGO_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        #Setting up openssl version variable
        $package_md = vcpkg search openssl | Select-String -Pattern "^openssl\s+[^\s]+\s+.*$"
        if ($package_md.Count -gt 1){
            echo "::error::vcpkg found many packages matching regex instead of one: $package_md"
        }
        if ($package_md.Count -eq 0){
          echo "::error::vcpkg could not find any packages matching the regex"
        }
        
        $version = [regex]::match($package_md, '^openssl\s+([^\s]+)\s+.*$').Groups[1].Value
        echo "MOST_RECENT_OPENSSL_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - uses: actions/cache@v2
      id: cache-cargo
      with:
        path: |
          %USERPROFILE%\.cargo\registry
          %USERPROFILE%\.cargo\git
          target
        key: ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-v${{ env.CARGO_VERSION }}-
    - uses: actions/cache@v2
      id: cache_openssl
      with:
        path: |
          vcpkg-cache
        key: ${{ runner.os }}-cache-openssl-${{env.MOST_RECENT_OPENSSL_VERSION}}
    - name: Prepare the Windows Build Environment
      run: |
        $abs_path = "{0}\vcpkg-cache" -f $pwd
        vcpkg integrate install
        vcpkg install openssl:x64-windows --binarysource="files,$abs_path,readwrite"
    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install Python dependencies
      run: python -m pip install --upgrade pip setuptools wheel
    - name: Run tests
      run: |
        python -m venv venv
        ./venv/Scripts/activate.ps1
        pip install maturin==0.9.0 toml==0.10.1 pyarrow==1.0.0
        cd python
        maturin develop
        python -m unittest discover tests
    - name: Workspace rebuild for cache
      if: steps.cache-cargo.outputs.cache-hit != 'true'
      #Do a full workspace rebuild so that the cache contains artifacts for all workspace members 
      run: |
        cargo clean
        cargo build






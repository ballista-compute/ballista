name: Rust
on:
  push:
    paths:
      - rust/**
  pull_request:
    paths:
      - rust**
  workflow_dispatch:
    

# Note, toolchain version must match the rustup version: either "nightly" or "nightly-YYYY-MM-DD"
# and must contain the toolchain for the OS at the end.

env:
  VCPKGRS_DYNAMIC: 1
  #TOOLCHAIN_VERSION: stable-x86_64-pc-windows-msvc

jobs:
  PreTestChecks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Lint Ballista
      run: cd rust && cargo clippy -- -D warnings
    - name: Check Ballista formatting
      run: cd rust && cargo fmt -- --check


  Ubuntu:
    runs-on: ubuntu-latest
    needs: [PreTestChecks]
    steps:
    - uses: actions/checkout@v2
    - name: Build Ballista
      run: cd rust && cargo build
    - name: Run tests
      run: cd rust && cargo test

  Mac:
    runs-on: macos-latest
    needs: [PreTestChecks]
    steps:
    - uses: actions/checkout@v2
    - name: Build Ballista
      run: cd rust && cargo build
    - name: Run tests
      run: cd rust && cargo test



  Windows:
    runs-on: windows-2016
    needs: [PreTestChecks]
    steps:
    - uses: actions/checkout@v2
    - name: Setup environment variables
      run: |
        #Setting up openssl version variable
        $package_md = vcpkg search openssl | Select-String -Pattern "^openssl\s+[^\s]+\s+.*$"
        if ($package_md.Count -gt 1){
            echo "::error::vcpkg found many packages matching regex instead of one: $package_md"
        }
        if ($package_md.Count -eq 0){
          echo "::error::vcpkg could not find any packages matching the regex"
        }
        
        $version = [regex]::match($package_md, '^openssl\s+([^\s]+)\s+.*$').Groups[1].Value
        echo "MOST_RECENT_OPENSSL_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - uses: actions/cache@v2
      id: cache_openssl
      with:
        path: |
          vcpkg-cache
        key: ${{ runner.os }}-cache-openssl-${{env.MOST_RECENT_OPENSSL_VERSION}}

    - name: Prepare the Windows Build Environment
      run: |
        $abs_path = "{0}\vcpkg-cache" -f $pwd
        vcpkg integrate install
        vcpkg install openssl:x64-windows --binarysource="files,$abs_path,readwrite"
    - name: Build Ballista
      run: |
        cd rust && cargo build
    - name: Run tests
      run: |
        cd rust && cargo test


  

  Docker:
    runs-on: ubuntu-latest
    env:
      # this points to the repository that others fork from. Useful to fetch cached images from
      BASE_REPOSITORY: ballista-compute/ballista
      BUILDER_IMAGE_NAME: docker.pkg.github.com/${{ github.repository }}/ballista-rust-builder
      IMAGE_NAME: docker.pkg.github.com/${{ github.repository }}/ballista-rust
    steps:
    - uses: actions/checkout@v2
    # github does not provide a clean ref name. We build it here, see https://stackoverflow.com/a/58035262/931303
    - name: Extract git reference name
      shell: bash
      run: echo "##[set-output name=ref;]$(A=${GITHUB_REF#refs/heads/}; A=${A#refs/pulls/}; echo ${A////.})"
      id: extract_ref
    # login to docker so that we can pull images from it.
    - name: Docker login
      run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p $GITHUB_TOKEN
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    # try to fetch the latest builder image, so that we can re-use cached layers from it
    # it tries fetching it from the following places in order
    # - current fork, ref name
    # - base repo, main
    - name: Pull builder image
      run: >
        docker pull "$BUILDER_IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}" ||
        docker pull "docker.pkg.github.com/$BASE_REPOSITORY/ballista-rust-builder:main" ||
        true
    # build the builder image and push it so that it is available for caching
    - name: Build builder image
      run: >
        docker build -f docker/rust.dockerfile
        --cache-from $BUILDER_IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}
        --cache-from docker.pkg.github.com/$BASE_REPOSITORY/ballista-rust-builder:main
        -t $BUILDER_IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}
        --target builder
        .
    - name: Push builder image
      # we can't push images on pull requests, as tokens only allow read access (for security reasons)
      if: github.event_name != 'pull_request'
      run: docker push $BUILDER_IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}
    - name: Build image
      run: >
        docker build -f docker/rust.dockerfile
        --cache-from $BUILDER_IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}
        -t $IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}
        .
    - name: Push image
      # we can't push images on pull requests, as tokens only allow read access (for security reasons)
      if: github.event_name != 'pull_request'
      run: docker push $IMAGE_NAME:${{ steps.extract_ref.outputs.ref }}

#  IntegrationTests:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    - name: Build images
#      run: bash dev/build-rust.sh
#    - name: Build benchmarks
#      run: cd benchmarks/tpch && cargo build
#    - name: Build integration test stack
#      run: cd benchmarks/tpch && docker-compose up -d
#    - name: Wait for executors to start
#      uses: jakejarvis/wait-action@master
#      with:
#        time: "20s"
#    - Generate TPC-H data
#      run: cd benchmarks/tpch && ./tpch-gen.sh
#    - name: Run integration tests
#      run: cd benchmarks/tpch && cargo run benchmark --host localhost --port 50051 --query 12 --path data --format tbl
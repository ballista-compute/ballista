syntax = "proto3";

package ballista.protobuf;

option java_multiple_files = true;
option java_package = "org.ballistacompute.protobuf";
option java_outer_classname = "BallistaProto";

///////////////////////////////////////////////////////////////////////////////////////////////////
// Ballista Logical Plan
///////////////////////////////////////////////////////////////////////////////////////////////////

// logical expressions
message LogicalExprNode {
  oneof ExprType {
    // column references
    string column_name = 10;
    
    // alias
    AliasNode alias = 14;
    
    // literals
    string literal_string = 20;
    int32 literal_int8 = 21;
    int32 literal_int16 = 22;
    int32 literal_int32 = 23;
    int64 literal_int64 = 24;
    
    uint32 literal_uint8 = 25;
    uint32 literal_uint16 = 26;
    uint32 literal_uint32 = 27;
    uint64 literal_uint64 = 28;
    
    float literal_f32 = 29;
    double literal_f64 = 30;
    
    ArrowType literal_null = 31;
    
    // binary expressions
    BinaryExprNode binary_expr = 40;
    
    // aggregate expressions
    AggregateExprNode aggregate_expr = 50;
    
    // null checks
    IsNull is_null_expr = 60;
    IsNotNull is_not_null_expr = 61;
    Not not_expr = 62;
    
    BetweenNode between = 70;
    CaseNode case_ = 71;
    CastNode cast = 72;
    SortExprNode sort = 73;
    NegativeNode negative = 74;
    InListNode in_list = 75;
    bool wildcard = 76;
  }
}

message IsNull {
  LogicalExprNode expr = 1;
}

message IsNotNull {
  LogicalExprNode expr = 1;
}

message Not {
  LogicalExprNode expr = 1;
}

message AliasNode {
  LogicalExprNode expr = 1;
  string alias = 2;
}

message BinaryExprNode {
  LogicalExprNode l = 1;
  LogicalExprNode r = 2;
  string op = 3;
}

message NegativeNode {
  LogicalExprNode expr = 1;
}

message InListNode {
  LogicalExprNode expr = 1;
  repeated LogicalExprNode list = 2;
  bool negated = 3;
}

enum AggregateFunction {
  MIN = 0;
  MAX = 1;
  SUM = 2;
  AVG = 3;
  COUNT = 4;
}

message AggregateExprNode {
  AggregateFunction aggr_function = 1;
  LogicalExprNode expr = 2;
}

message BetweenNode {
  LogicalExprNode expr = 1;
  bool negated = 2;
  LogicalExprNode low = 3;
  LogicalExprNode high = 4;
}

message CaseNode {
  LogicalExprNode expr = 1;
  repeated WhenThen when_then_expr = 2;
  LogicalExprNode else_expr = 3;
}

message WhenThen {
  LogicalExprNode when_expr = 1;
  LogicalExprNode then_expr = 2;
}

message CastNode {
  LogicalExprNode expr = 1;
  ArrowType arrow_type = 2;
}

message SortExprNode {
  LogicalExprNode expr = 1;
  bool asc = 2;
  bool nulls_first = 3;
}

// LogicalPlan is a nested type
message LogicalPlanNode {
  oneof LogicalPlanType {
    CsvTableScanNode csv_scan = 10;
    ParquetTableScanNode parquet_scan = 11;
    ProjectionNode projection = 20;
    SelectionNode selection = 21;
    LimitNode limit = 22;
    AggregateNode aggregate = 23;
    JoinNode join = 24;
    SortNode sort = 25;
    RepartitionNode repartition = 26;
    EmptyRelationNode empty_relation = 27;
    CreateExternalTableNode create_external_table = 28;
    ExplainNode explain = 29;
  }
}

message ProjectionColumns {
  repeated string columns = 1;
}

message CsvTableScanNode {
  string table_name = 1;
  string path = 2;
  bool has_header = 3;
  string delimiter = 4;
  string file_extension = 5;
  ProjectionColumns projection = 6;
  Schema schema = 7;
  repeated LogicalExprNode filters = 8;
}

message ParquetTableScanNode {
  string table_name = 1;
  string path = 2;
  ProjectionColumns projection = 3;
  Schema schema = 4;
  repeated LogicalExprNode filters = 5;
}

message ProjectionNode {
  LogicalPlanNode input = 1;
  repeated LogicalExprNode expr = 2;
}

message SelectionNode {
  LogicalPlanNode input = 1;
  LogicalExprNode expr = 2;
}

message SortNode{
  LogicalPlanNode input = 1;
  repeated LogicalExprNode expr = 2;
}

message RepartitionNode{
  LogicalPlanNode input = 1;
  oneof partition_method {
    uint64 round_robin = 2;
    HashRepartition hash = 3;
  }
}

message HashRepartition{
  repeated LogicalExprNode hash_expr = 2;
  uint64 batch_size = 1;
}

message EmptyRelationNode{
  bool produce_one_row = 1;
}

message CreateExternalTableNode{
  string name = 1;
  string location = 2;
  FileType file_type = 3;
  bool has_header = 4;
  Schema schema = 5;
}

enum FileType{
  NdJson = 0;
  Parquet = 1;
  CSV = 2;
}

message ExplainNode{
  LogicalPlanNode input = 1;
  bool verbose = 2;
}

message DfField{
  string qualifier = 2;
  Field field = 1;
}

message AggregateNode {
  LogicalPlanNode input = 1;
  repeated LogicalExprNode group_expr = 2;
  repeated LogicalExprNode aggr_expr = 3;
}

enum JoinType {
  INNER = 0;
  LEFT = 1;
  RIGHT = 2;
}

message JoinNode {
  LogicalPlanNode left = 1;
  LogicalPlanNode right = 2;
  JoinType join_type = 3;
  repeated string left_join_column = 4;
  repeated string right_join_column = 5;
}

message LimitNode {
  LogicalPlanNode input = 1;
  uint32 limit = 2;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Ballista Physical Plan
///////////////////////////////////////////////////////////////////////////////////////////////////

// PhysicalPlanNode is a nested type
message PhysicalPlanNode {
  oneof PhysicalPlanType {
    ParquetScanExecNode parquet_scan = 1;
    CsvScanExecNode csv_scan = 2;
    EmptyExecNode empty = 11;
    ProjectionExecNode projection = 20;
    SelectionExecNode selection = 21;
    GlobalLimitExecNode global_limit = 22;
    LocalLimitExecNode local_limit = 23;
    HashAggregateExecNode hash_aggregate = 30;
    HashJoinExecNode hash_join = 31;
    ShuffleReaderExecNode shuffle_reader = 40;
    SortExecNode sort = 50;
    CoalesceBatchesExecNode coalesce_batches = 51;
    FilterExecNode filter = 52;
  }
}

message FilterExecNode {
  PhysicalPlanNode input = 1;
  LogicalExprNode expr = 2;
}

message ParquetScanExecNode {
  repeated string filename = 1;
  repeated uint32 projection = 2;
}

message CsvScanExecNode {
  string path = 1;
  repeated uint32 projection = 2;
  Schema schema = 3;
  string file_extension = 4;
  bool has_header = 5;
  uint32 batch_size = 6;
  string delimiter = 7;
  
  // partition filenames
  repeated string filename = 8;
}

message HashJoinExecNode {
  PhysicalPlanNode left = 1;
  PhysicalPlanNode right = 2;
  repeated JoinOn on = 3;
  JoinType join_type = 4;

}

message JoinOn {
   string left = 1;
   string right = 2;
}


message EmptyExecNode {
  bool produce_one_row = 1;
  Schema schema = 2;
}

message ProjectionExecNode {
  PhysicalPlanNode input = 1;
  repeated LogicalExprNode expr = 2;
}

message SelectionExecNode {
  LogicalExprNode expr = 2;
}

enum AggregateMode {
  PARTIAL = 0;
  FINAL = 1;
  COMPLETE = 2;
}

message HashAggregateExecNode {
  repeated LogicalExprNode group_expr = 1;
  repeated LogicalExprNode aggr_expr = 2;
  AggregateMode mode = 3;
}

message ShuffleReaderExecNode {
  repeated PartitionId shuffle_id = 1;
  Schema schema = 2;
}

message GlobalLimitExecNode {
  PhysicalPlanNode input = 1;
  uint32 limit = 2;
}

message LocalLimitExecNode {
  PhysicalPlanNode input = 1;
  uint32 limit = 2;
}

message SortExecNode {
  PhysicalPlanNode input = 1;
  repeated LogicalExprNode expr = 2;
}

message CoalesceBatchesExecNode {
  PhysicalPlanNode input = 1;
  uint32 target_batch_size = 2;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Ballista Scheduling
///////////////////////////////////////////////////////////////////////////////////////////////////

message KeyValuePair {
  string key = 1;
  string value = 2;
}

message Action {

  oneof ActionType {
    // Execute a logical query plan
    LogicalPlanNode query = 1;

    // Execute one partition of a physical query plan
    ExecutePartition execute_partition = 2;

    // Fetch a partition from an executor
    PartitionId fetch_partition = 3;
  }
  
  // configuration settings
  repeated KeyValuePair settings = 100;
}

message ExecutePartition {
  string job_uuid = 1;
  uint32 stage_id = 2;
  uint32 partition_id = 3;
  PhysicalPlanNode plan = 4;
  // The task could need to read partitions from other executors
  repeated PartitionLocation partition_location = 5;
}

// Mapping from partition id to executor id
message PartitionLocation {
  PartitionId partition_id = 1;
  ExecutorMetadata executor_meta = 2;
}

// Unique identifier for a materialized partition of data
message PartitionId {
  string job_uuid = 1;
  uint32 stage_id = 2;
  uint32 partition_id = 4;
}

message ExecutorMetadata {
  string id = 1;
  string host = 2;
  uint32 port = 3;
}

message GetExecutorMetadataParams {}

message GetExecutorMetadataResult {
  repeated ExecutorMetadata metadata = 1;
}

message RegisterExecutorParams {
  ExecutorMetadata metadata = 1;
}

message RegisterExecutorResult {}


service SchedulerGrpc {
  rpc GetExecutorsMetadata (GetExecutorMetadataParams) returns (GetExecutorMetadataResult) {}

  rpc RegisterExecutor (RegisterExecutorParams) returns (RegisterExecutorResult) {}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Arrow Data Types
///////////////////////////////////////////////////////////////////////////////////////////////////

message Schema {
  repeated Field columns = 1;
}

message Field {
  // name of the field
  string name = 1;
  ArrowType arrow_type = 2;
  bool nullable = 3;
  // for complex data types like structs, unions
  repeated Field children = 4;
}

// copied from GandivaType from Apache Arrow project
enum ArrowType {
  NONE = 0;     // arrow::Type::NA
  BOOL = 1;     // arrow::Type::BOOL
  UINT8 = 2;    // arrow::Type::UINT8
  INT8 = 3;     // arrow::Type::INT8
  UINT16 = 4;   // represents arrow::Type fields in src/arrow/type.h
  INT16 = 5;
  UINT32 = 6;
  INT32 = 7;
  UINT64 = 8;
  INT64 = 9;
  HALF_FLOAT = 10;
  FLOAT = 11;
  DOUBLE = 12;
  UTF8 = 13;
  BINARY = 14;
  FIXED_SIZE_BINARY = 15;
  DATE32 = 16;
  DATE64 = 17;
  TIMESTAMP = 18;
  TIME32 = 19;
  TIME64 = 20;
  INTERVAL = 21;
  DECIMAL = 22;
  LIST = 23;
  STRUCT = 24;
  UNION = 25;
  DICTIONARY = 26;
  MAP = 27;
}
